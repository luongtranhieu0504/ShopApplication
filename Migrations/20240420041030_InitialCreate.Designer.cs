// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ShopApplication.Data;

#nullable disable

namespace ShopApplication.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20240420041030_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ShopApplication.Models.Comment", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("commentText")
                        .HasColumnType("text");

                    b.Property<DateTime>("createAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("edited")
                        .HasColumnType("boolean");

                    b.Property<int>("productId")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("productId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("ShopApplication.Models.Image", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<DateTime>("createAT")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("height")
                        .HasColumnType("integer");

                    b.Property<int>("producId")
                        .HasColumnType("integer");

                    b.Property<string>("url")
                        .HasColumnType("text");

                    b.Property<int>("width")
                        .HasColumnType("integer");

                    b.HasKey("id");

                    b.HasIndex("producId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("ShopApplication.Models.Order", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("city")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("createAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<float>("discount")
                        .HasColumnType("real");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("fullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("itemsCount")
                        .HasColumnType("integer");

                    b.Property<string>("paymentMethod")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("postalCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("region")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("shipmentPrice")
                        .HasColumnType("real");

                    b.Property<string>("shippingMethod")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("size")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("subTotal")
                        .HasColumnType("real");

                    b.Property<float>("totalAmount")
                        .HasColumnType("real");

                    b.HasKey("id");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("ShopApplication.Models.OrderToProduct", b =>
                {
                    b.Property<int>("OrderId")
                        .HasColumnType("integer");

                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("ProductPrice")
                        .HasColumnType("real");

                    b.Property<int>("amountItem")
                        .HasColumnType("integer");

                    b.Property<string>("color")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("size")
                        .HasColumnType("text");

                    b.HasKey("OrderId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderToProduct");
                });

            modelBuilder.Entity("ShopApplication.Models.Product", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<List<string>>("availableColor")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<List<string>>("availableSize")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<string>("category")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("createAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("imageUrl")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<float>("price")
                        .HasColumnType("real");

                    b.Property<float>("salePercentage")
                        .HasColumnType("real");

                    b.Property<string>("status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("ShopApplication.Models.ProductTag", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("integer");

                    b.Property<int>("TagId")
                        .HasColumnType("integer");

                    b.HasKey("ProductId", "TagId");

                    b.HasIndex("TagId");

                    b.ToTable("ProductTag");
                });

            modelBuilder.Entity("ShopApplication.Models.Tag", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("nameTag")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id");

                    b.ToTable("Tag");
                });

            modelBuilder.Entity("ShopApplication.Models.Comment", b =>
                {
                    b.HasOne("ShopApplication.Models.Product", "product")
                        .WithMany("comments")
                        .HasForeignKey("productId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("product");
                });

            modelBuilder.Entity("ShopApplication.Models.Image", b =>
                {
                    b.HasOne("ShopApplication.Models.Product", "product")
                        .WithMany("images")
                        .HasForeignKey("producId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("product");
                });

            modelBuilder.Entity("ShopApplication.Models.OrderToProduct", b =>
                {
                    b.HasOne("ShopApplication.Models.Order", "Order")
                        .WithMany("orderToProducts")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShopApplication.Models.Product", "Product")
                        .WithMany("orderToProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("ShopApplication.Models.ProductTag", b =>
                {
                    b.HasOne("ShopApplication.Models.Product", "Product")
                        .WithMany("productTags")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ShopApplication.Models.Tag", "Tag")
                        .WithMany("ProductTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("ShopApplication.Models.Order", b =>
                {
                    b.Navigation("orderToProducts");
                });

            modelBuilder.Entity("ShopApplication.Models.Product", b =>
                {
                    b.Navigation("comments");

                    b.Navigation("images");

                    b.Navigation("orderToProducts");

                    b.Navigation("productTags");
                });

            modelBuilder.Entity("ShopApplication.Models.Tag", b =>
                {
                    b.Navigation("ProductTags");
                });
#pragma warning restore 612, 618
        }
    }
}
